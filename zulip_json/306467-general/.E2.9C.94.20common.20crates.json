[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460843\">@Richard</span> I'd like to continue <a href=\"https://github.com/engula/engula/pull/155#discussion_r762419077\">the discussion about \"common\" crate</a> here apart from the mainstream fo PR#155. It's somehow a random topic.</p>\n<p>I agree that bad management ruins everything no matter how you name it, but names influence has its impact also. \"core\" and even \"common\" can deliver preference on few dependencies (\"core\" =&gt; Flink, Calcite, \"common\" =&gt; Apache Commons, Pulsar). However, \"util\" is never a good choice. \"util\" always means random functions you need, just like \"misc\".</p>",
        "id": 263702299,
        "sender_full_name": "tison",
        "timestamp": 1638619785
    },
    {
        "content": "<p>What do you mean \"preference on few dependencies\"?</p>",
        "id": 263702741,
        "sender_full_name": "Richard",
        "timestamp": 1638620121
    },
    {
        "content": "<p>I can accept that \"common\" may be a better choice than \"util\", since we are trying to put things that are common in multiple crates there.</p>",
        "id": 263702824,
        "sender_full_name": "Richard",
        "timestamp": 1638620239
    },
    {
        "content": "<p>\"core\", on the other hand, is not acceptable. I don't know how other project use it. But I don't see how something like <code>ResultStream</code> can be the core of Engula.</p>",
        "id": 263702968,
        "sender_full_name": "Richard",
        "timestamp": 1638620357
    },
    {
        "content": "<p>A \"common\" crate  which means a basic crate is always near to the root of the dependency graph, so any contributor and reviewer share a common understanding that it cannot pollute heavy dependencies. For example, you won't add \"axum\" dependency in such a \"common\" crate, which is not strange in a \"util\" crate.</p>",
        "id": 263703035,
        "sender_full_name": "tison",
        "timestamp": 1638620423
    },
    {
        "content": "<p>I'm OK with \"commons\" with the understanding of Apache Commons.</p>",
        "id": 263703055,
        "sender_full_name": "tison",
        "timestamp": 1638620471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456473\">tison</span> <a href=\"#narrow/stream/306467-general/topic/common.20crates/near/263703035\">said</a>:</p>\n<blockquote>\n<p>A \"common\" crate  which means a basic crate is always near to the root of the dependency graph, so any contributor and reviewer share a common understanding that it cannot pollute heavy dependencies.</p>\n</blockquote>\n<p>Agree. But I think we need to talk more about \"heavy dependencies\".</p>",
        "id": 263703424,
        "sender_full_name": "Richard",
        "timestamp": 1638620927
    },
    {
        "content": "<p>Just as few as possible. For example \"axum\" as mentioned above; for example \"tokio\". We can have multiple common crates if we'd really want to wrap something common based on \"tokio\" or \"clap\" and name them as \"engula-network\", \"engula-cli\", but not a \"god\" crate which ruins modularization which enables users (including internal high-level crates) to pull fewer dependency - especially engula is assumed to be used as a library.</p>",
        "id": 263703642,
        "sender_full_name": "tison",
        "timestamp": 1638621254
    },
    {
        "content": "<p>So now this is a more clear goal, to avoid unnecessary dependencies.</p>",
        "id": 263704318,
        "sender_full_name": "Richard",
        "timestamp": 1638621883
    },
    {
        "content": "<p>I am still thinking about the difference between having a <code>engula-util</code> which contains a <code>network</code>/<code>cli</code> and a standalone <code>engula-network</code> and <code>engula-cli</code>.</p>",
        "id": 263704419,
        "sender_full_name": "Richard",
        "timestamp": 1638622001
    },
    {
        "content": "<p>Putting something in a <code>util</code> usually implies that the thing is actually not specific to the project, it is just some utilities that can be potentially used by other projects too.</p>",
        "id": 263704852,
        "sender_full_name": "Richard",
        "timestamp": 1638622314
    },
    {
        "content": "<p>You can keep in mind that heavy dependencies near the root of the dependency graph are harmful, and let's review this topic when real-world bad cases occur. I have a strong feeling to avoid top-level <code>util</code> and see many bad cases somewhere else. You can check out <a href=\"https://twitter.com/tison1096/status/1417750125196189698\">this tweet</a> about existing complaints about \"util\".</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/tison1096/status/1417750125196189698\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/65cd3ebcf841cc420f910e1564d9cfe6c7f757da/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313037313430323432303330313737383934352f52716b5a45566d2d5f6e6f726d616c2e6a7067\"></a><p>util, common 都是非常不好的名字，很容易变成垃圾场。core 也差不多，但是因为 core 大部分时候会控制依赖复杂度，这种情况下就还行。 <a href=\"https://t.co/EoYjCa11M0\">https://twitter.com/W4anD0eR96/status/1417750125196189698/photo/1</a></p><span>- tison (@tison1096)</span><div class=\"twitter-image\"><a href=\"https://t.co/EoYjCa11M0\"><img src=\"https://uploads.zulipusercontent.net/9a6a529f212061aab285f15e3c0466116b8b7f80/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45367a63475a7455594149546d4e732e6a70673a7468756d62\"></a></div></div></div>",
        "id": 263705007,
        "sender_full_name": "tison",
        "timestamp": 1638622426
    },
    {
        "content": "<p>To be honest, those complaints are too casual and mean very little to me. But let's agree to disagree and get back to the situation we actually meet here. I think we can both agree that something like <code>ResultStream</code> can be placed in a \"common\" crate.</p>",
        "id": 263705922,
        "sender_full_name": "Richard",
        "timestamp": 1638623227
    },
    {
        "content": "<p>Yes if it means a concrete type of general dynamic future streams. If it means a specific type of what when you read events from a journal stream returns, the root is <code>engula_journal::ResultStream</code>. I've commented it at <a href=\"https://github.com/engula/engula/pull/155#discussion_r762423250\">here</a>.</p>",
        "id": 263706278,
        "sender_full_name": "tison",
        "timestamp": 1638623537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456473\">tison</span> has marked this topic as resolved.</p>",
        "id": 264020934,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638892626
    }
]